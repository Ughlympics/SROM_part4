#include "Poly.h"
#include <iostream>


//11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
int main()
{
    Poly f("01100100010000011100111111101111110100100011110111100010000101101101111110100000001011011100000111101111100100110011011111010011110101000001000100010110101001010011010101110111010110001011001011011101111101111111110000111011101001010011101010011011011100100010000110000000101011000100011010010100111011011110010011100100000100000111101111010111010010010000010111010101101101110100001110111001001010110001000001110000000100011110110101100000010");
    Poly s("01001111100001000000100100011111111101011011111011101101000101000111111110111110011011100011110100101100000100101101000111100010001011110001111010101111110000001100100100111011011001100111110111101110000010101010001101011100010101101110100001100010100111000000000111001100010101000000011110111110000110001110111100110101010100011011110001100010111000000111101110111000111001001101110001001101111010001101011111010111011000101100110101001001111");
    Poly n("11100100011001101110110111101011101011101011101110111011111111000000101011110011100001111111110100000111011001110011101011010010101111010101101000000011111001000100110011000110101011000001111110100111110101101110011011011010001000110110111001110000100010110010100100000000110111110110011100101110101100110111110101110101101110001010111101010010101100111111101101100111001010100100101101100100101000011011001000100101001011110010110011000010110");
    Poly add, mul, inv;

    /*for (int i = 0; i < 443; i++) {
        std::cout << 1;
    }*/


    //add = f + s;
    mul = f * s;
    //Poly sq = f.square();
    
    //Poly trace_pol = f.trace(f);
    //inv = f.inverse();
    Poly power = f.power(n);

    std::cout << "First pol: " << f.toBitString() << std::endl;
    std::cout << "Second pol: " << s.toBitString() << std::endl;
    std::cout << "ADDResult: " << add.toBitString() << std::endl;
    std::cout << "MULResult: " << mul.toBitString() << std::endl;
    //std::cout << "SQResult: " << sq.toBitString() << std::endl;
    //std::cout << "TRResult: " << trace_pol.toBitString() << std::endl;
    std::cout << "Inverse Result: " << inv.toBitString() << std::endl;
    std::cout << "Power Result: " << power.toBitString() << std::endl;
}

