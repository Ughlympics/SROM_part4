#include "Poly.h"
#include <iostream>


//11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
int main()
{
    Poly f("01101101011110011101001000110011100001110001111110100111111001010111101011111011110001110000111011001010010001101010101010110110111111000000011110011010000111001101001111100011100111100111100101010111111101001001111111010100101101000011010110001100001001110110000000101110001100111111111000010110100000110111011101011101000111010001110001111110100111000100111100111100000000100010110010010100011110101000000010011110110110110011010111110110001");
    Poly s("10101010100010000011111110011010111001011110010010000111111010001001111000010011011010101100101101110101110010100000110011001011000011000101000010000011001001011000011001000000000010011111110000110101010010101001101110000000111001010011111100100111100001111011010110101111111111101110010111011110010101110110000101010001111000000000111100101000000010000111111101111101011101100100011110010101001110110011010100100111010010100001011101001010100");
    Poly n("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    Poly add, mul, inv;

    /*for (int i = 0; i < 443; i++) {
        std::cout << 1;
    }*/


    add = f + s;
    mul = f * s;
    Poly sq = f.square();
    
   /* Poly trace_pol = f.trace(f);
    inv = f.inverse();
    Poly power = f.pow(n);*/

    std::cout << "First pol: " << f.toBitString() << std::endl;
    std::cout << "Second pol: " << s.toBitString() << std::endl;
    std::cout << "ADDResult: " << add.toBitString() << std::endl;
    std::cout << "MULResult: " << mul.toBitString() << std::endl;
    std::cout << "SQResult: " << sq.toBitString() << std::endl;
    /*std::cout << "TRResult: " << trace_pol.toBitString() << std::endl;
    std::cout << "Inverse Result: " << inv.toBitString() << std::endl;
    std::cout << "Power Result: " << power.toBitString() << std::endl;*/
}

